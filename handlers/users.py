import logging
from datetime import datetime, timedelta
from typing import List
import requests
from aiogram import Bot
from aiogram.types import Message, CallbackQuery, ChatActions, ContentType, MediaGroup, Update, InlineKeyboardMarkup, \
    InlineKeyboardButton
from aiogram.types.input_file import InputFile
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext

import matplotlib.pyplot as plt
import io
import re
import tempfile
import os
import config
from states.user import EnterChatName, EnterChatRename
from utils import db, ai, more_api, pay  # –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ë–î –∏ –≤–Ω–µ—à–Ω–∏–º–∏ API
from states import user as states  # –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
import keyboards.user as user_kb  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
from config import bot_url, TOKEN, NOTIFY_URL, bug_id, PHOTO_PATH, MJ_PHOTO_BASE_URL, ADMINS_CODER
from create_bot import dp  # –î–∏—Å–ø–µ—Ç—á–µ—Ä –∏–∑ create_bot.py
from utils.ai import mj_api, text_to_speech, voice_to_text

logger = logging.getLogger(__name__)

logging.basicConfig(
    level=logging.INFO,
    format='%(filename)s:%(lineno)d #%(levelname)-8s '
           '[%(asctime)s] - %(name)s - %(message)s')

vary_types = {"subtle": "Subtle", "strong": "Strong"}  # –¢–∏–ø—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º

'''
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
async def check_promocode(user_id, code, bot: Bot):

    promocode = await db.get_promocode_by_code(code)  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ –∫–æ–¥—É
    if promocode is None:
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ
    user_promocode = await db.get_user_promocode_by_promocode_id_and_user_id(promocode["promocode_id"], user_id)
    all_user_promocode = await db.get_all_user_promocode_by_promocode_id(promocode["promocode_id"])

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
    if user_promocode is None and len(all_user_promocode) < promocode["uses_count"]:
        await db.create_user_promocode(promocode["promocode_id"], user_id)
        await db.add_balance(user_id, promocode['amount'], is_promo=True)  # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É –ø—Ä–æ–º–æ–∫–æ–¥–∞
        await bot.send_message(user_id, f"<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {promocode['amount']} —Ä—É–±–ª–µ–π.</b>")
    else:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        if user_promocode is not None:
            await bot.send_message(user_id, "<b>–î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –í–∞–º–∏ —Ä–∞–Ω–µ–µ.</b>")
        elif len(all_user_promocode) >= promocode["uses_count"]:
            await bot.send_message(user_id, "<b>–°—Å—ã–ª–∫–∞ –∏—Å—á–µ—Ä–ø–∞–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π.</b>")
'''


# –°–Ω–∏–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def remove_balance(bot: Bot, user_id):
    await db.remove_balance(user_id)
    user = await db.get_user(user_id)
    # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ 50, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    if user["balance"] <= 50:
        await db.update_stock_time(user_id, int(datetime.now().timestamp()))
        await bot.send_message(user_id, """‚ö†Ô∏è–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –±–∞–ª–∞–Ω—Å!
–£—Å–ø–µ–π –ø–æ–ø–æ–ª–Ω–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ –∏ –ø–æ–ª—É—á–∏ –Ω–∞ —Å—á—ë—Ç +10% –æ—Ç —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚§µÔ∏è""",
                               reply_markup=user_kb.get_pay(user_id, 10))  # –ö–Ω–æ–ø–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤
async def not_enough_balance(bot: Bot, user_id: int, ai_type: str):
    now = datetime.now()

    if ai_type == "chatgpt":
        user = await db.get_user(user_id)
        model = user["gpt_model"]

        logger.info(f"–¢–æ–∫–µ–Ω—ã –¥–ª—è ChatGPT –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. User: {user}, Model: {model}")

        model_map = {'4o-mini': 'ChatGPT',
                     '4o': 'GPT-4o',
                     'o3-mini': 'GPT-o3-mini'}  # –ø–æ–º–µ–Ω—è—Ç—å

        user_data = await db.get_user_notified_gpt(user_id)

        if not model == '4o-mini':
            await db.set_model(user_id, "4o-mini")
            await bot.send_message(user_id, "‚úÖ–ú–æ–¥–µ–ª—å –¥–ª—è ChatGPT –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ GPT-4o-mini")

        if model == '4o-mini':
            keyboard = user_kb.get_chatgpt_models_noback()
        else:
            keyboard = user_kb.get_chatgpt_tokens_menu('normal', model)

        await bot.send_message(user_id,
                               f"‚ö†Ô∏è–¢–æ–∫–µ–Ω—ã –¥–ª—è {model_map[model]} –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç‚§µÔ∏è",
                               reply_markup=keyboard)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤

    elif ai_type == "image":
        user_data = await db.get_user_notified_mj(user_id)

        if user_data and user_data['last_notification']:
            last_notification = user_data['last_notification']

            # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–æ —Å–∫–∏–¥–∫–æ–π
            if now < last_notification + timedelta(hours=24):
                await bot.send_message(user_id, """
‚ö†Ô∏è–ó–∞–ø—Ä–æ—Å—ã –¥–ª—è Midjourney –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç‚§µÔ∏è
                """,
                                       reply_markup=user_kb.get_midjourney_discount_requests_menu()
                                       )
                return
        await bot.send_message(user_id, """
‚ö†Ô∏è–ó–∞–ø—Ä–æ—Å—ã –¥–ª—è Midjourney –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç‚§µÔ∏è
        """,
                               reply_markup=user_kb.get_midjourney_requests_menu())  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ MidJourney
async def get_mj(prompt, user_id, bot: Bot):
    user = await db.get_user(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã
    if user["mj"] <= 0 and user["free_image"] <= 0:
        await not_enough_balance(bot, user_id, "image")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤
        return

    await bot.send_message(user_id, "–û–∂–∏–¥–∞–π—Ç–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..üïô",
                           reply_markup=user_kb.get_menu(user["default_ai"]))
    # await bot.send_message(user_id, "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
    await bot.send_chat_action(user_id, ChatActions.UPLOAD_PHOTO)

    if '‚Äî' in prompt:
        prompt.replace('‚Äî', '--')

    res = await ai.get_mdjrny(prompt, user_id)  # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API

    logger.info(f"MidJourney: {res}")

    if res is None:
        await bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")
        return
    elif ('Banned Prompt' in res):
        await bot.send_message(user_id, f"–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤ –∑–∞–ø—Ä–æ—Å–µ:\n\n{res}")
        return
    elif ('Invalid image prompt position' in res):
        await bot.send_message(user_id, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞:\n\n{res}")
        return
    elif ('status' in res) and (res['status'] == "failed"):
        await bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:\n\n{res['message']}")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤ MidJourney
    now = datetime.now()
    user_notified = await db.get_user_notified_mj(user_id)
    user = await db.get_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if 1 < user["mj"] <= 3:  # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å 3 –∏–ª–∏ –º–µ–Ω—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        if user_notified is None:
            await db.create_user_notification_mj(user_id)
            await notify_low_midjourney_requests(user_id, bot)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ–∫–µ–Ω–æ–≤
            # await db.set_user_notified(user_id)  # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        else:
            last_notification = user_notified['last_notification']
            if last_notification is None or now > last_notification + timedelta(days=30):
                await db.update_user_notification_mj(user_id)
                await notify_low_midjourney_requests(user_id, bot)


def split_message(text: str, max_length: int) -> list:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ max_length."""
    lines = text.split('\n')
    parts = []
    current_part = ""

    for line in lines:
        if len(current_part) + len(line) + 1 > max_length:
            parts.append(current_part)
            current_part = ""
        current_part += line + '\n'

    if current_part:
        parts.append(current_part)

    return parts


def process_formula(match):
    formula = match.group(1)

    # –ó–∞–º–µ–Ω—ã –¥–ª—è –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    formula = re.sub(r"\\frac\{(.*?)\}\{(.*?)\}", r"\1 / \2", formula)  # \frac{a}{b} ‚Üí a / b
    formula = re.sub(r"\\text\{(.*?)\}", r"\1", formula)  # \text{...} ‚Üí —Ç–µ–∫—Å—Ç –±–µ–∑ LaTeX
    formula = formula.replace(r"\times", "√ó").replace(r"\cdot", "¬∑")  # –£–º–Ω–æ–∂–µ–Ω–∏–µ: \times ‚Üí √ó, \cdot ‚Üí ¬∑
    formula = formula.replace(r"\implies", "‚áí").replace(r"\approx", "‚âà")  # –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    formula = re.sub(r"\\sqrt\{(.*?)\}", r"‚àö(\1)", formula)  # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å: \sqrt{a} ‚Üí ‚àö(a)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, \begin{cases} ... \end{cases})
    formula = re.sub(r"\\begin{cases}(.*?)\\end{cases}", r"\n{\1}\n", formula, flags=re.DOTALL)
    formula = re.sub(r"\\\\", r"\n", formula)  # –ó–∞–º–µ–Ω—è–µ–º \\\\ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É

    # –°—Ç–µ–ø–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, x^2 ‚Üí x¬≤)
    formula = re.sub(r"([a-zA-Z])\^([0-9]+)", lambda m: f"{m.group(1)}{chr(8304 + int(m.group(2)))}", formula)

    # –ò–Ω–¥–µ–∫—Å—ã: t_1 ‚Üí t‚ÇÅ
    formula = re.sub(r"([a-zA-Z])_([0-9]+)", lambda m: f"{m.group(1)}{chr(8320 + int(m.group(2)))}", formula)

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã LaTeX (–Ω–∞–ø—Ä–∏–º–µ—Ä, \)
    formula = formula.replace("\\", "")

    return f"<pre>{formula.strip()}</pre>"


def format_math_in_text(text: str) -> str:
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—É–ª –≤–Ω—É—Ç—Ä–∏ \[ ... \] –∏–ª–∏ \( ... \)
    text = re.sub(r"\\\[(.*?)\\\]", process_formula, text)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—É–ª –≤–Ω—É—Ç—Ä–∏ \[...\]
    text = re.sub(r"\\\((.*?)\\\)", process_formula, text)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—É–ª –≤–Ω—É—Ç—Ä–∏ \(...\)
    return text


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT
async def get_gpt(prompt, messages, user_id, bot: Bot, state: FSMContext):
    user = await db.get_user(user_id)
    lang_text = {"en": "compose an answer in English", "ru": "—Å–æ—Å—Ç–∞–≤—å –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"}
    model = user['gpt_model']
    model_dashed = model.replace("-", "_")

    current_chat = await db.get_chat_by_id(user["current_chat_id"])
    summary = current_chat["summary"] if current_chat else ""
    if summary:
        prompt = f"–†–∞–Ω–µ–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –æ–±—Å—É–∂–¥–∞–ª–æ—Å—å: {summary.strip()}\n\n" + prompt
    prompt += f"\n{lang_text[user['chat_gpt_lang']]}"

    message_user = prompt

    if messages is None:
        messages = []
    messages.append({"role": "user", "content": prompt})

    logger.info(f"–¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ ChatGPT. User: {user}, Model: {model}, tokens: {user[f'tokens_{model_dashed}']}")

    await bot.send_chat_action(user_id, ChatActions.TYPING)

    res = await ai.get_gpt(messages, model)

    # –®–∞–≥ 1: —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã –≤–Ω—É—Ç—Ä–∏ \( \)
    html_content = format_math_in_text(res["content"])

    # –®–∞–≥ 2: –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ –µ—â—ë –∫–∞–∫-—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –Ω–æ –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å HTML ‚Äî –Ω–µ–ª—å–∑—è!

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if len(html_content) <= 4096:
        await bot.send_message(
            user_id,
            html_content,
            reply_markup=user_kb.get_clear_or_audio(),
            parse_mode="HTML"
        )
    else:
        parts = split_message(html_content, 4096)
        for part in parts:
            await bot.send_message(
                user_id,
                part,
                reply_markup=user_kb.get_clear_or_audio(),
                parse_mode="HTML"
            )

    await state.update_data(content=res["content"])

    if not res["status"]:
        return

    message_gpt = res["content"]
    messages.append({"role": "assistant", "content": message_gpt})

    if not current_chat:
        generated_name = await generate_chat_name(message_user, model, message_gpt)
        new_chat_id = await db.create_chat(user_id, name=generated_name, summary="")
        await db.set_current_chat(user_id, new_chat_id)
        chat_id = new_chat_id
    else:
        chat_id = current_chat["id"]

    await db.add_message(chat_id, user_id, message_user)
    await db.add_message(chat_id, None, message_gpt)

    old_summary = current_chat["summary"] if current_chat else ""
    new_summary = await update_chat_summary(chat_id, message_user, message_gpt, model, old_summary)
    await db.update_chat_summary(chat_id, new_summary)

    await db.remove_chatgpt(user_id, res["tokens"], model)

    now = datetime.now()
    user_notified = await db.get_user_notified_gpt(user_id)
    user = await db.get_user(user_id)
    has_purchase = await db.has_matching_orders(user_id)

    if user[f"tokens_{model_dashed}"] <= 1000 and model_dashed != "4o_mini":
        logger.info(
            f"–û—Å—Ç–∞–ª–æ—Å—å {user[f'tokens_{model_dashed}']} —Ç–æ–∫–µ–Ω–æ–≤, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {user_notified}, –ø–æ–∫—É–ø–∫–∞: {has_purchase}")
        if user_notified is None and has_purchase:
            await db.create_user_notification_gpt(user_id)
            await notify_low_chatgpt_tokens(user_id, bot)
        else:
            last_notification = user_notified['last_notification'] if user_notified else None
            if (last_notification is None or now > last_notification + timedelta(days=30)) and has_purchase:
                await db.update_user_notification_gpt(user_id)
                await notify_low_chatgpt_tokens(user_id, bot)

    await db.add_action(user_id, model)
    return messages


async def update_chat_summary(chat_id: int, message_user: str, message_gpt: str, model: str,
                              old_summary: str = "") -> str:
    summary_prompt = (
        f"–í–æ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –±–µ—Å–µ–¥—ã: {old_summary}\n\n"
        f"–î–æ–±–∞–≤—å –∫ –Ω–µ–º—É –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏ –¥–∏–∞–ª–æ–≥–∞:\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message_user}\n"
        f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {message_gpt}\n\n"
        f"–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ (–º–∞–∫—Å–∏–º—É–º 3000 —Å–∏–º–≤–æ–ª–æ–≤):"
    )

    response = await ai.get_gpt(
        messages=[
            {"role": "system",
             "content": "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —É–º–µ—é—â–∏–π —Å–∂–∏–º–∞—Ç—å –¥–∏–∞–ª–æ–≥–∏ –≤ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
            {"role": "user", "content": summary_prompt}
        ],
        model=model
    )

    return response["content"].strip()


async def generate_chat_name(message_user: str, model: str, message_gpt: str) -> str:
    prompt = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: \"{message_user}\"\n"
        f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª: \"{message_gpt}\"\n\n"
        f"–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ, –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):"
    )

    response = await ai.get_gpt(
        messages=[
            {"role": "system", "content": "–¢—ã –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—à—å –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤."},
            {"role": "user", "content": prompt}
        ],
        model=model
    )

    return response["content"].strip().strip('"')[:50]


''' –ù–æ–≤—ã–µ –¥–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏—Ö—Å—è —Ç–æ–∫–µ–Ω–∞—Ö '''


# –£–≤–µ–¥–æ–º–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ–∫–µ–Ω–æ–≤ GPT
async def notify_low_chatgpt_tokens(user_id, bot: Bot):
    logger.info('–í–Ω—É—Ç—Ä–∏ —Å–∫–∏–¥–æ—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –≤—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å')

    await bot.send_message(user_id, """
–£ –≤–∞—Å –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è üí¨ChatGPT
–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ <b>–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É</b>!
–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –º–æ–¥–µ–ª—å‚§µÔ∏è
    """, reply_markup=user_kb.get_chatgpt_models_noback('discount'))


# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–ø—Ä–æ—Å–æ–≤ MidJourney
async def notify_low_midjourney_requests(user_id, bot: Bot):
    await bot.send_message(user_id, """
–£ –≤–∞—Å –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è üé®Midjourney
–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ <b>–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É</b>!

–£—Å–ø–µ–π—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å—ã —Å–æ —Å–∫–∏–¥–∫–æ–π, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ <b>24 —á–∞—Å–∞</b>‚§µÔ∏è
    """, reply_markup=user_kb.get_midjourney_discount_notification())


# @dp.errors_handler()
# async def log_all_updates(update: Update, exception: Exception = None):
#     logging.debug(f"Update received: {update.to_python()}")
#     if exception:
#         logging.error(f"Exception: {exception}")
#     return True

'''
@dp.callback_query_handler()
async def all_callback_handler(call: CallbackQuery):
    logging.info(f"Received callback_data: {call.data}")
    await call.message.answer("Callback received")
'''


# –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(state="*", commands='start')
async def start_message(message: Message, state: FSMContext):
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ª—é–±–æ–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã /start (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã)
    msg_args = message.get_args().split("_")
    inviter_id = 0
    code = None
    if msg_args != ['']:
        for msg_arg in msg_args:
            if msg_arg[0] == "r":
                try:
                    inviter_id = int(msg_arg[1:])
                except ValueError:
                    continue
            elif msg_arg[0] == "p":
                code = msg_arg[1:]

    user = await db.get_user(message.from_user.id)

    if user is None:
        await db.add_user(message.from_user.id, message.from_user.username, message.from_user.first_name,
                          int(inviter_id))
        default_ai = "chatgpt"
    else:
        default_ai = user["default_ai"]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer("""<b>NeuronAgent</b>ü§ñ - <i>2 –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ!</i>
<b>ChatGPT –∏–ª–∏ Midjourney?</b>""", reply_markup=user_kb.get_menu(default_ai))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω
    # if code is not None:
    #     await check_promocode(message.from_user.id, code, message.bot)


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ ChatGPT
@dp.callback_query_handler(text="settings")
async def settings(call: CallbackQuery):
    user = await db.get_user(call.from_user.id)
    user_lang = user["chat_gpt_lang"]

    await call.message.answer("""–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ 
ChatGPT‚§µÔ∏è""", reply_markup=user_kb.settings(user_lang, 'acc'))
    await call.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ callback-–∑–∞–ø—Ä–æ—Å
@dp.callback_query_handler(text="check_sub")
async def check_sub(call: CallbackQuery):
    user = await db.get_user(call.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    if user is None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        await db.add_user(call.from_user.id, call.from_user.username, call.from_user.first_name, 0)
    await call.message.answer("""<b>NeuronAgent</b>ü§ñ - <i>2 –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ!</i>

<b>ChatGPT –∏–ª–∏ Midjourney?</b>""", reply_markup=user_kb.get_menu(user["default_ai"]))  # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ AI
    await call.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ callback-–∑–∞–ø—Ä–æ—Å
@dp.callback_query_handler(text="delete_msg")
async def delete_msg(call: CallbackQuery, state: FSMContext):
    await call.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —á–µ—Ä–µ–∑ callback-–∑–∞–ø—Ä–æ—Å
@dp.callback_query_handler(text="back_to_menu")
async def back_to_menu(call: CallbackQuery):
    user = await db.get_user(call.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await call.message.answer("""NeuronAgentü§ñ - 2 –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ!

ChatGPT –∏–ª–∏ Midjourney?""", reply_markup=user_kb.get_menu(user["default_ai"]))  # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ AI
    await call.message.delete()  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
@dp.message_handler(state="*", text="ü§ù–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
@dp.message_handler(commands='partner')
async def ref_menu(message: Message):
    ref_data = await db.get_ref_stat(message.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
    if ref_data['all_income'] is None:
        all_income = 0
    else:
        all_income = ref_data['all_income']

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é QR-–∫–æ–¥ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
    await message.answer_photo(more_api.get_qr_photo(bot_url + '?start=' + str(message.from_user.id)),
                               caption=f'''<b>ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>

<i>–ü—Ä–∏–≤–æ–¥–∏ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π 15% —Å –∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π, –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ!</i>

<b>‚¨áÔ∏è –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>
‚îî {bot_url}?start=r{message.from_user.id}

<b>üèÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚îú –õ–∏—á–Ω–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö: <b>{ref_data["count_refs"]}</b>
‚îú –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—Ç: <b>{ref_data["orders_count"]}</b>
‚îú –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{all_income}</b> —Ä—É–±–ª–µ–π
‚îî –î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: <b>{ref_data["available_for_withdrawal"]}</b> —Ä—É–±–ª–µ–π

–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: ''',
                               reply_markup=user_kb.get_ref_menu(f'{bot_url}?start=r{message.from_user.id}'))


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–∫–∫–∞—É–Ω—Ç–∞)
@dp.message_handler(state="*", text="‚öô–ê–∫–∫–∞—É–Ω—Ç")
@dp.message_handler(state="*", commands="account")
async def show_profile(message: Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    user = await db.get_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_lang = user['chat_gpt_lang']

    mj = int(user['mj']) + int(user['free_image']) if int(user['mj']) + int(user['free_image']) >= 0 else 0
    gpt_4o_mini = int(user['tokens_4o_mini']) if int(user['tokens_4o_mini']) >= 0 else 0
    gpt_4o = int(user['tokens_4o']) if int(user['tokens_4o']) >= 0 else 0
    gpt_o3_mini = int(user['tokens_o3_mini']) if int(user['tokens_o3_mini']) >= 0 else 0

    logger.info(
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è {user_id}:mj: {mj}, gpt_4o: {gpt_4o}, gpt_4o_mini: {gpt_4o_mini}, gpt_o3_mini: {gpt_o3_mini}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏ —Ç–æ–∫–µ–Ω–æ–≤
    sub_text = f"""
–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ‚§µÔ∏è

–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ üé®Midjourney:  {format(mj, ',').replace(',', ' ')}
–¢–æ–∫–µ–Ω—ã üí¨GPT-4o:  {format(gpt_4o, ',').replace(',', ' ')}
–¢–æ–∫–µ–Ω—ã üí¨GPT-4o-mini:  ‚ôæÔ∏è
–¢–æ–∫–µ–Ω—ã üí¨GPT-o3-mini:  {format(gpt_o3_mini, ',').replace(',', ' ')}
        """

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    await message.answer(f"""üÜî: <code>{user_id}</code>
{sub_text}""", reply_markup=user_kb.get_account(user_lang, "account"))


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ callback-–∑–∞–ø—Ä–æ—Å
@dp.callback_query_handler(Text(startswith="back_to_profile"), state="*")
async def back_to_profile(call: CallbackQuery, state: FSMContext):
    logger.info(f"Back To Profile {call.data}")

    src = call.data.split(":")[1]
    user_id = call.from_user.id
    user = await db.get_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if src == "acc":
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await call.message.delete()

        await state.finish()
        user_lang = user['chat_gpt_lang']

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏ —Ç–æ–∫–µ–Ω–æ–≤
        mj = int(user['mj']) + int(user['free_image']) if int(user['mj']) + int(user['free_image']) >= 0 else 0
        gpt_4o_mini = int(user['tokens_4o_mini']) if int(user['tokens_4o_mini']) >= 0 else 0
        gpt_4o = int(user['tokens_4o']) if int(user['tokens_4o']) >= 0 else 0
        gpt_o3_mini = int(user['tokens_o3_mini']) if int(user['tokens_o3_mini']) >= 0 else 0

        logger.info(
            f"–ö–æ–ª–∏–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è {user_id}:mj: {mj}, gpt_4o: {gpt_4o}, gpt_4o_mini: {gpt_4o_mini}, gpt_o3_mini: {gpt_o3_mini}")

        keyboard = user_kb.get_account(user_lang, "account")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏ —Ç–æ–∫–µ–Ω–æ–≤
        sub_text = f"""
–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ‚§µÔ∏è

–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ üé®Midjourney:  {format(mj, ',').replace(',', ' ')}
–¢–æ–∫–µ–Ω—ã üí¨GPT-4o:  {format(gpt_4o, ',').replace(',', ' ')}
–¢–æ–∫–µ–Ω—ã üí¨GPT-4o-mini:  ‚ôæÔ∏è
–¢–æ–∫–µ–Ω—ã üí¨GPT-o3-mini:  {format(gpt_o3_mini, ',').replace(',', ' ')}
            """

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
        await call.message.answer(f"""üÜî: <code>{user_id}</code>
    {sub_text}""", reply_markup=keyboard)

    else:
        await state.finish()

        if src == "not_gpt":
            await call.message.edit_text("""
–£ –≤–∞—Å –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è —Ç–æ–∫–µ–Ω—ã –¥–ª—è üí¨ChatGPT
–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ <b>–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É</b>!

–£—Å–ø–µ–π—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω—ã —Å–æ —Å–∫–∏–¥–∫–æ–π, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ <b>24 —á–∞—Å–∞</b>‚§µÔ∏è
            """, reply_markup=user_kb.get_chatgpt_tokens_menu('disount', user["gpt_model"]))

        if src == "not_mj":
            await call.message.edit_text("""
–£ –≤–∞—Å –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è üé®Midjourney
–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ <b>–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É</b>!

–£—Å–ø–µ–π—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å—ã —Å–æ —Å–∫–∏–¥–∫–æ–π, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ <b>24 —á–∞—Å–∞</b>‚§µÔ∏è
            """, reply_markup=user_kb.get_midjourney_discount_notification())

    await call.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ callback-–∑–∞–ø—Ä–æ—Å
@dp.callback_query_handler(Text(startswith="change_lang:"))
async def change_lang(call: CallbackQuery):
    curr_lang = call.data.split(":")[1]  # –¢–µ–∫—É—â–∏–π —è–∑—ã–∫
    from_msg = call.data.split(":")[2]  # –ò—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Ç–∫—É–¥–∞ –±—ã–ª –≤—ã–∑–≤–∞–Ω callback)
    new_lang = "en" if curr_lang == "ru" else "ru"  # –°–º–µ–Ω–∞ —è–∑—ã–∫–∞
    await db.change_chat_gpt_lang(call.from_user.id, new_lang)  # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –≤ –±–∞–∑–µ
    lang_text = {"ru": "—Ä—É—Å—Å–∫–∏–π", "en": "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π"}
    await call.answer(f"–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {lang_text[new_lang]}")
    if from_msg == "acc":
        kb = user_kb.settings(new_lang, from_msg)  # –ú–µ–Ω—é ChatGPT
    else:
        kb = user_kb.get_account(new_lang, from_msg)  # –ú–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞
    await call.message.edit_reply_markup(reply_markup=kb)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è ChatGPT
@dp.message_handler(state="*", text="üí¨ChatGPT‚úÖ")
@dp.message_handler(state="*", text="üí¨ChatGPT")
@dp.message_handler(state="*", commands="chatgpt")
async def ask_question(message: Message, state: FSMContext):
    if state:
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.change_default_ai(message.from_user.id, "chatgpt")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ChatGPT –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π AI

    user_id = message.from_user.id
    user = await db.get_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    model = (user["gpt_model"]).replace("-", "_")

    logger.info(f'–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å {model}')

    if model == "4o_mini" and user["tokens_4o_mini"] <= 0:
        logger.info("–ú–æ–¥–µ–ª—å 4o-mini –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º")
        await db.set_model(user_id, "4o")
        model = "4o"
        await message.answer("‚úÖ–ú–æ–¥–µ–ª—å –¥–ª—è ChatGPT –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ GPT-4o")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–∫–∏
    if user[f"tokens_{model}"] <= 0:
        return await not_enough_balance(message.bot, user_id, "chatgpt")  # –°–æ–æ–±—â–∞–µ–º –æ–± –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ –ª–∏–º–∏—Ç–∞

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞
    await message.answer("""<b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å</b>
–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–ù–∞–ø–∏—à–∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É: –ö–∞–∫ —è –ø—Ä–æ–≤—ë–ª —ç—Ç–æ –ª–µ—Ç–æ</code>

<u><a href="https://telegra.ph/Kak-polzovatsya-ChatGPT-podrobnaya-instrukciya-06-04">–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.</a></u>""",
                         reply_markup=user_kb.get_menu("chatgpt"),
                         disable_web_page_preview=True)
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
    current_chat = await db.get_chat_by_id(user["current_chat_id"])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if current_chat and current_chat["name"]:
        await message.answer(f"üí¨ –ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç: *{current_chat['name']}*", parse_mode="Markdown")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
@dp.message_handler(state="*", text="üë®üèª‚Äçüíª–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
@dp.message_handler(state="*", commands="help")
async def support(message: Message, state: FSMContext):
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer('–û—Ç–≤–µ—Ç—ã –Ω–∞ –º–Ω–æ–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –Ω–∞—à–µ–º <a href="https://t.me/NeuronAgent">–∫–∞–Ω–∞–ª–µ</a>.',
                         disable_web_page_preview=True, reply_markup=user_kb.about)  # –ö–Ω–æ–ø–∫–∞ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è MidJourney
@dp.message_handler(state="*", text="üé®Midjourney‚úÖ")
@dp.message_handler(state="*", text="üé®Midjourney")
@dp.message_handler(state="*", commands="midjourney")
async def gen_img(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.change_default_ai(message.from_user.id, "image")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MidJourney –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π AI
    user = await db.get_user(message.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–∫–∏
    if user["mj"] <= 0 and user["free_image"] <= 0:
        await not_enough_balance(message.bot, message.from_user.id, "image")  # –°–æ–æ–±—â–∞–µ–º –æ–± –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
        return

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞
    await message.answer("""<b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>
<i>–ù–∞–ø—Ä–∏–º–µ—Ä:</i> <code>–ó–∞–º–µ—Ä–∑—à–µ–µ –±–∏—Ä—é–∑–æ–≤–æ–µ –æ–∑–µ—Ä–æ –≤–æ–∫—Ä—É–≥ –∑–∞—Å–Ω–µ–∂–µ–Ω–Ω—ã—Ö –≥–æ—Ä–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω</code>

<u><a href="https://telegra.ph/Kak-polzovatsya-MidJourney-podrobnaya-instrukciya-10-16">–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.</a></u>""",
                         reply_markup=user_kb.get_menu("image"),
                         disable_web_page_preview=True)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã —á–µ—Ä–µ–∑ callback-–∑–∞–ø—Ä–æ—Å
@dp.callback_query_handler(Text(startswith="select_amount"))
async def select_amount(call: CallbackQuery):
    amount = int(call.data.split(":")[1])  # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ callback
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    urls = {
        "tinkoff": pay.get_pay_url_tinkoff(call.from_user.id, amount),
        "freekassa": pay.get_pay_url_freekassa(call.from_user.id, amount),
        "payok": pay.get_pay_url_payok(call.from_user.id, amount),
    }
    await call.message.answer(f"""üí∞ –°—É–º–º–∞: <b>{amount} —Ä—É–±–ª–µ–π

‚ôªÔ∏è –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b>""", reply_markup=user_kb.get_pay_urls(urls))  # –ö–Ω–æ–ø–∫–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
    await call.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.message_handler(state="*", text="–û—Ç–º–µ–Ω–∞")
async def cancel(message: Message, state: FSMContext):
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user = await db.get_user(message.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("–í–≤–æ–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=user_kb.get_menu(user["default_ai"]))  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ callback
@dp.callback_query_handler(Text(startswith="choose_image:"))
async def choose_image(call: CallbackQuery):
    await call.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    user = await db.get_user(call.from_user.id)

    if user["mj"] <= 0 and user["free_image"] <= 0:
        await not_enough_balance(call.bot, call.from_user.id, "image")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è MidJourney
        return
    action_id = call.data.split(":")[1]
    image_id = call.data.split(":")[2]
    task_id = (await db.get_task_by_action_id(int(action_id)))["external_task_id"]
    await call.message.answer("–û–∂–∏–¥–∞–π—Ç–µ, —Å–æ—Ö—Ä–∞–Ω—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ç–ª–∏—á–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ‚Ä¶‚è≥",
                              reply_markup=user_kb.get_menu(user["default_ai"]))
    res = await ai.get_choose_mdjrny(task_id, image_id, call.from_user.id)  # –ó–∞–ø—Ä–æ—Å –∫ MidJourney API

    if res is not None and "success" not in res:
        if "message" in res and res["message"] == "repeat task":
            return await call.message.answer(
                "–í—ã —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")  # –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–æ—Å—å


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ callback
@dp.callback_query_handler(Text(startswith="change_image:"))
async def change_image(call: CallbackQuery):
    await call.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    user_id = call.from_user.id
    user_notified = await db.get_user_notified_mj(user_id)

    user = await db.get_user(user_id)
    if user["mj"] <= 0 and user["free_image"] <= 0:
        await not_enough_balance(call.bot, user_id, "image")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        return
    action = call.data.split(":")[3]
    button_type = call.data.split(":")[1]
    value = call.data.split(":")[2]
    task_id = (await db.get_task_by_action_id(int(action)))["external_task_id"]
    await call.message.answer("–û–∂–∏–¥–∞–π—Ç–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ‚è≥",
                              reply_markup=user_kb.get_menu(user["default_ai"]))

    action_id = await db.add_action(user_id, "image", button_type)

    if 1 < user["mj"] <= 3:  # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å 3 –∏–ª–∏ –º–µ–Ω—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        now = datetime.now()

        if user_notified is None:
            await db.create_user_notification_mj(user_id)
            await notify_low_midjourney_requests(user_id,
                                                 call.bot)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ–∫–µ–Ω–æ–≤
            # await db.set_user_notified(user_id)  # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        else:
            last_notification = user_notified['last_notification']
            if last_notification is None or now > last_notification + timedelta(days=30):
                await db.update_user_notification_mj(user_id)
                await notify_low_midjourney_requests(user_id, call.bot)

    if button_type == "zoom":
        response = await mj_api.outpaint(task_id, value, action_id)  # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
    elif button_type == "vary":
        response = await mj_api.variation(task_id, value, action_id)  # –í–∞—Ä–∏–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ API


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ callback
@dp.callback_query_handler(text="clear_content")
async def clear_content(call: CallbackQuery, state: FSMContext):
    user = await db.get_user(call.from_user.id)
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await call.message.answer("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω",
                              reply_markup=user_kb.get_menu(user["default_ai"]))  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    try:
        await call.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    except:
        pass


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ callback
@dp.callback_query_handler(Text(startswith="try_prompt"))
async def try_prompt(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    if "prompt" not in data:
        await call.message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å")
        return await call.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await state.finish()
    await call.answer()

    user = await db.get_user(call.from_user.id)
    if user["default_ai"] == "image":
        await get_mj(data['prompt'], call.from_user.id, call.bot)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ ChatGPT: –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ callback
@dp.callback_query_handler(text="chatgpt_about_me", state="*")
async def chatgpt_about_me(call: CallbackQuery, state: FSMContext):
    user = await db.get_user(call.from_user.id)
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await call.message.delete()

    await call.message.answer(
        '<b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å</b>\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å ChatGPT –ª—é–±–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ–±–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã‚§µÔ∏è\n\n<u><a href="https://telegra.ph/Tonkaya-nastrojka-ChatGPT-06-30">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.</a></u>',
        disable_web_page_preview=True,
        reply_markup=user_kb.clear_description())
    await state.set_state(states.ChangeChatGPTAboutMe.text)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    await call.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ ChatGPT
@dp.message_handler(state=states.ChangeChatGPTAboutMe.text)
async def change_profile_info(message: Message, state: FSMContext):
    if len(message.text) > 256:
        return await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ 256 —Å–∏–º–≤–æ–ª–æ–≤")
    await db.update_chatgpt_about_me(message.from_user.id, message.text)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
    await message.answer("‚úÖ–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.finish()


# –•—ç–Ω–¥–ª–µ—Ä –≤–≤–æ–¥–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–π ChatGPT
@dp.callback_query_handler(text="character_menu", state="*")
async def character_menu(call: CallbackQuery, state: FSMContext):
    user = await db.get_user(call.from_user.id)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await call.message.delete()

    await call.message.answer(
        '<b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å</b>\n\n–ù–∞—Å—Ç—Ä–æ–π—Ç–µ ChatGPT –∫–∞–∫ –í–∞–º —É–¥–æ–±–Ω–æ - —Ç–æ–Ω, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–∫—Ä–∞—Å —Å–æ–æ–±—â–µ–Ω–∏–π‚§µÔ∏è\n\n<u><a href="https://telegra.ph/Tonkaya-nastrojka-ChatGPT-06-30">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.</a></u>',
        disable_web_page_preview=True,
        reply_markup=user_kb.clear_description())
    await state.set_state(states.ChangeChatGPTCharacter.text)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ ChatGPT
@dp.message_handler(state=states.ChangeChatGPTCharacter.text)
async def change_character(message: Message, state: FSMContext):
    if len(message.text) > 256:
        return await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ 256 —Å–∏–º–≤–æ–ª–æ–≤")
    await db.update_chatgpt_character(message.from_user.id, message.text)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
    await message.answer("‚úÖ–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.finish()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ChatGPT
@dp.callback_query_handler(text="reset_chatgpt_settings", state="*")
async def reset_chatgpt_settings(call: CallbackQuery, state: FSMContext):
    await db.update_chatgpt_character(call.from_user.id, "")
    await db.update_chatgpt_about_me(call.from_user.id, "")  # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
    await call.answer("–û–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ", show_alert=True)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ ChatGPT
@dp.callback_query_handler(text="chatgpt_settings", state="*")
async def chatgpt_setting(call: CallbackQuery, state: FSMContext):
    user = await db.get_user(call.from_user.id)
    await call.message.answer(
        '<b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å</b>\n\n–ù–∞—Å—Ç—Ä–æ–π—Ç–µ ChatGPT –∫–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–æ - —Ç–æ–Ω, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–∫—Ä–∞—Å —Å–æ–æ–±—â–µ–Ω–∏–π ‚§µÔ∏è\n\n<u><a href="https://telegra.ph/Tonkaya-nastrojka-ChatGPT-06-30">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.</a></u>',
        disable_web_page_preview=True,
        reply_markup=user_kb.get_menu(user["default_ai"]))
    await state.set_state(states.ChangeChatGPTSettings.text)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await call.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ ChatGPT
@dp.message_handler(state=states.ChangeChatGPTSettings.text)
async def change_profile_settings(message: Message, state: FSMContext):
    if len(message.text) > 256:
        return await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ 256 —Å–∏–º–≤–æ–ª–æ–≤")
    await db.update_chatgpt_settings(message.from_user.id, message.text)  # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.finish()


from aiogram.utils.exceptions import CantParseEntities


async def safe_send_message(bot, user_id, text, **kwargs):
    try:
        await bot.send_message(user_id, text, **kwargs)
    except CantParseEntities as e:
        logger.error(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—É—â–Ω–æ—Å—Ç–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        # –û—Ç–ø—Ä–∞–≤–∏–º –∑–∞–ø—Ä–æ—Å –≤ GPT –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        prompt = f"–ò—Å–ø—Ä–∞–≤—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º: {text}"

        # –ü–æ–ª—É—á–∏–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
        corrected_text_response = await ai.get_gpt(
            messages=[{"role": "user", "content": prompt}],
            model="4o-mini"  # –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω—É–∂–Ω—É—é –º–æ–¥–µ–ª—å
        )

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç GPT
        corrected_text = corrected_text_response["content"]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(user_id, corrected_text, **kwargs)


# –û—Å–Ω–æ–≤–Ω–æ–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
@dp.message_handler()
async def gen_prompt(message: Message, state: FSMContext):
    await state.update_data(prompt=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    if user is None:
        await safe_send_message(message.bot, user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞")

    if user["default_ai"] == "chatgpt":
        model = (user["gpt_model"]).replace("-", "_")

        logger.info(f'–¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ GPT. User: {user}, Model: {model}, tokens: {user[f"tokens_{model}"]}')

        if model == "4o_mini" and user["tokens_4o_mini"] <= 0:
            logger.info("–ú–æ–¥–µ–ª—å 4o-mini –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º")
            await db.set_model(user_id, "4o")
            model = "4o"
            await safe_send_message(message.bot, user_id, "‚úÖ–ú–æ–¥–µ–ª—å –¥–ª—è ChatGPT –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ GPT-4o")

        if user[f"tokens_{model}"] <= 0:
            return await not_enough_balance(message.bot, user_id, "chatgpt")

        data = await state.get_data()
        system_msg = user["chatgpt_about_me"] + "\n" + user["chatgpt_character"]
        messages = [{"role": "system", "content": system_msg}] if "messages" not in data else data["messages"]
        update_messages = await get_gpt(prompt=message.text, messages=messages, user_id=user_id,
                                        bot=message.bot, state=state)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await state.update_data(messages=update_messages)
        await safe_send_message(message.bot, user_id, update_messages[-1]['content'], parse_mode="HTML")

    elif user["default_ai"] == "image":
        await get_mj(message.text, user_id, message.bot)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ MidJourney


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
@dp.message_handler(content_types=['voice'])
async def handle_voice(message: Message, state: FSMContext):
    file_info = await message.bot.get_file(message.voice.file_id)
    file_path = file_info.file_path
    file = await message.bot.download_file(file_path)

    with tempfile.NamedTemporaryFile(delete=False, suffix=".ogg") as temp_ogg_file:
        temp_ogg_file.write(file.getbuffer())
        temp_ogg_path = temp_ogg_file.nameF

    text = voice_to_text(temp_ogg_path)
    os.remove(temp_ogg_path)
    await state.update_data(prompt=text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user = await db.get_user(message.from_user.id)

    if user is None:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞")

    if user["default_ai"] == "chatgpt":
        model = (user["gpt_model"]).replace("-", "_")

        if user[f"tokens_{model}"] <= 0:
            return await not_enough_balance(message.bot, message.from_user.id, "chatgpt")

        data = await state.get_data()
        system_msg = user["chatgpt_about_me"] + "\n" + user["chatgpt_settings"]
        messages = [{"role": "system", "content": system_msg}] if "messages" not in data else data["messages"]
        update_messages = await get_gpt(prompt=text, messages=messages, user_id=message.from_user.id,
                                        bot=message.bot, state=state)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT
        await state.update_data(messages=update_messages)

    elif user["default_ai"] == "image":
        await get_mj(text, message.from_user.id, message.bot)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ MidJourney


# –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ –ê—É–¥–∏–æ
@dp.callback_query_handler(text="text_to_audio")
async def return_voice(call: CallbackQuery, state: FSMContext):
    processing_message = await call.message.answer("‚è≥–ò–¥—ë—Ç –∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ, –æ–∂–∏–¥–∞–π—Ç–µ")
    user_id = call.from_user.id

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≥–æ–ª–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user_voice = await db.get_voice(user_id)
        if not user_voice:  # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π
            raise ValueError("User voice not found")
    except (ValueError, Exception):  # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
        user_voice = await db.create_voice(user_id)  # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    content_raw = await state.get_data()

    content = content_raw.get("content")
    if not content:
        await call.message.answer("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è.")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    audio_response = text_to_speech(content, voice=user_voice)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "‚è≥–ò–¥—ë—Ç –∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ, –æ–∂–∏–¥–∞–π—Ç–µ"
    await processing_message.delete()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await call.message.answer_voice(voice=audio_response)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try:
        await call.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
@dp.message_handler(is_media_group=False, content_types="photo")
async def photo_imagine(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if message.caption is None:
        await message.answer("–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
        return
    file = await message.photo[-1].get_file()
    photo_url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
    ds_photo_url = await more_api.upload_photo_to_host(photo_url)  # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Ö–æ—Å—Ç–∏–Ω–≥
    if ds_photo_url == "error":
        await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —Ñ–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")
        await message.bot.send_message(bug_id, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–º–µ–Ω–∏—Ç—å API-–∫–ª—é—á —Ñ–æ—Ç–æ—Ö–æ—Å—Ç–∏–Ω–≥–∞")
        return
    prompt = ds_photo_url + " " + message.caption  # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
    await state.update_data(prompt=prompt)

    user = await db.get_user(user_id)

    if user["default_ai"] == "chatgpt":
        model = (user["gpt_model"]).replace('-', '_')

        if user[f"tokens_{model}"] <= 0:
            return await not_enough_balance(message.bot, message.from_user.id, "chatgpt")

        data = await state.get_data()
        system_msg = user["chatgpt_about_me"] + "\n" + user["chatgpt_settings"]
        messages = [{"role": "system", "content": system_msg}] if "messages" not in data else data["messages"]
        update_messages = await get_gpt(prompt, messages=messages, user_id=message.from_user.id,
                                        bot=message.bot, state=state)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT
        await state.update_data(messages=update_messages)

    elif user["default_ai"] == "image":
        await get_mj(prompt, message.from_user.id, message.bot)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª—å–±–æ–º–æ–≤ (–≥—Ä—É–ø–ø–æ–≤—ã—Ö —Ñ–æ—Ç–æ)
@dp.message_handler(is_media_group=True, content_types=ContentType.ANY)
async def handle_albums(message: Message, album: List[Message], state: FSMContext):
    if len(album) != 2 or not (album[0].photo and album[1].photo):
        return await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –¥–≤–∞ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –∏—Ö —Å–∫–ª–µ–∏—Ç—å")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ
    file = await album[0].photo[-1].get_file()
    photo_url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
    ds_photo_url1 = await more_api.upload_photo_to_host(photo_url)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–æ—Ç–æ
    file = await album[1].photo[-1].get_file()
    photo_url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
    ds_photo_url2 = await more_api.upload_photo_to_host(photo_url)

    prompt = f"{ds_photo_url1} {ds_photo_url2}"  # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–≤—É—Ö —Ñ–æ—Ç–æ
    await state.update_data(prompt=prompt)
    await get_mj(prompt, message.from_user.id, message.bot)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ MidJourney


# –í—Ö–æ–¥ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ GPT
@dp.callback_query_handler(text="model_menu")
async def model_menu(call: CallbackQuery):
    user_id = call.from_user.id
    user_model = await db.get_model(user_id)

    logger.info(f"User ID: {user_id}, —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {user_model}")

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–æ–¥–µ–ª—å—é
    keyboard = user_kb.model_keyboard(selected_model=user_model)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await call.message.delete()

    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å GPT –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤‚§µÔ∏è:", reply_markup=keyboard)
    await call.answer()


# –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ GPT
@dp.callback_query_handler(text_contains="select_model")
async def select_model(call: CallbackQuery):
    user_id = call.from_user.id
    selected_model = call.data.split(":")[1]  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö

    logger.info(f"User ID: {user_id}, –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: {selected_model}")

    try:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.set_model(user_id, selected_model)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
        keyboard = user_kb.model_keyboard(selected_model=selected_model)

        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å GPT –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤‚§µÔ∏è:", reply_markup=keyboard)
        await call.message.answer(f"‚úÖ–ú–æ–¥–µ–ª—å –¥–ª—è ChatGPT –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ GPT-{selected_model}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏ GPT: {e}")
        await call.answer()


# –í—Ö–æ–¥ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞
@dp.callback_query_handler(text="voice_menu")
async def voice_menu(call: CallbackQuery):
    user_id = call.from_user.id
    user_voice = await db.get_voice(user_id)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await call.message.delete()

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º
    keyboard = user_kb.voice_keyboard(selected_voice=user_voice)

    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è ChatGPT‚§µÔ∏è:", reply_markup=keyboard)
    await call.answer()


# –í—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞
@dp.callback_query_handler(text_contains="select_voice")
async def select_voice(call: CallbackQuery):
    user_id = call.from_user.id
    selected_voice = call.data.split(":")[1]  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö

    try:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.set_voice(user_id, selected_voice)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º
        updated_keyboard = user_kb.voice_keyboard(selected_voice=selected_voice)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await call.message.edit_reply_markup(reply_markup=updated_keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–±–æ—Ä–µ
        await call.answer(f"–í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å: {selected_voice} ‚úÖ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ–ª–æ—Å–∞: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –≥–æ–ª–æ—Å–æ–≤
@dp.callback_query_handler(text="check_voice")
async def check_voice(call: CallbackQuery):
    user_id = call.from_user.id
    user_lang = await db.get_chat_gpt_lang(user_id)

    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏
    if user_lang == "ru":
        voices_path = "voices_ru"
    elif user_lang == "en":
        voices_path = "voices_en"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(voices_path):
        await call.message.answer("‚ö†Ô∏è –ü–∞–ø–∫–∞ —Å –≥–æ–ª–æ—Å–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ .mp3
    voice_files = [f for f in os.listdir(voices_path) if f.endswith(".mp3")]

    # –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not voice_files:
        await call.message.answer("‚ö†Ô∏è –í –ø–∞–ø–∫–µ 'voices' –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
        return

    # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
    media_group = MediaGroup()
    for voice_file in voice_files:
        file_path = os.path.join(voices_path, voice_file)
        audio = InputFile(file_path)
        media_group.attach_audio(audio)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await call.message.answer(f"–û—Ç–≤–µ—Ç—ã ChatGPT:{'RUS' if user_lang == 'ru' else 'ENG'}")
    await call.message.answer_media_group(media_group)
    await call.answer()


@dp.callback_query_handler(text="my_chats")
async def show_my_chats(call: CallbackQuery, page: int = 0):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "my_chats", –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏.

    :param call: –û–±—ä–µ–∫—Ç CallbackQuery, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –≤—ã–∑–æ–≤–∞.
    :param page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Ç–æ–≤.
    """
    user_id = call.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(user_id)
    if not user:
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    chats_per_page = 4  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    offset = page * chats_per_page

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    conn = await db.get_conn()
    chats = await conn.fetch(
        "SELECT id, name FROM chats WHERE user_id = $1 ORDER BY created_at LIMIT $2 OFFSET $3",
        user["user_id"], chats_per_page, offset
    )
    await conn.close()

    current_chat_id = user["current_chat_id"]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = (
        "üóÇ *–ú–µ–Ω—é —á–∞—Ç–æ–≤ –ø–æ–∑–≤–æ–ª—è–µ—Ç:*\n"
        "- –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ —á–∞—Ç—ã\n"
        "- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏\n"
        "- –ò–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–æ–≤\n\n"
        "*–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —á–∞—Ç ‚§µÔ∏è*"
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    kb = InlineKeyboardMarkup(row_width=2)

    # –ö–Ω–æ–ø–∫–∏: —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
    kb.add(
        InlineKeyboardButton("‚ùå–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã", callback_data="delete_all_chats"),
        InlineKeyboardButton("‚ûï–ù–æ–≤—ã–π —á–∞—Ç", callback_data="create_chat")
    )

    # –ö–Ω–æ–ø–∫–∏ —á–∞—Ç–æ–≤
    for chat in chats:
        chat_name = chat["name"]
        chat_id = chat["id"]
        # –û—Ç–º–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
        if chat_id == current_chat_id:
            chat_button_text = f"‚úÖ {chat_name}"
        else:
            chat_button_text = chat_name
        kb.add(InlineKeyboardButton(chat_button_text, callback_data=f"select_chat:{chat_id}"))

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    kb.row(
        InlineKeyboardButton("‚èÆ", callback_data=f"page:first:{page}"),
        InlineKeyboardButton("‚óÄ", callback_data=f"page:prev:{page}"),
        InlineKeyboardButton("‚ñ∂", callback_data=f"page:next:{page}"),
        InlineKeyboardButton("‚è≠", callback_data=f"page:last:{page}")
    )

    # –ù–∞–∑–∞–¥
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–∞—Ç–∏–∫–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await call.message.answer(text, parse_mode="Markdown", reply_markup=kb)
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('page:'))
async def paginate_chats(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —á–∞—Ç–æ–≤. –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
    —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ (–ø–µ—Ä–≤–∞—è, –ø—Ä–µ–¥—ã–¥—É—â–∞—è, —Å–ª–µ–¥—É—é—â–∞—è, –ø–æ—Å–ª–µ–¥–Ω—è—è).

    :param call: –û–±—ä–µ–∫—Ç CallbackQuery, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –≤—ã–∑–æ–≤–∞.
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    page_data = call.data.split(":")
    action = page_data[1]  # first, prev, next, last
    current_page = int(page_data[2])  # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = call.from_user.id
    user = await db.get_user(user_id)
    if not user:
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = await db.get_conn()
    total_chats = await conn.fetchval(
        "SELECT COUNT(*) FROM chats WHERE user_id = $1", user_id
    )
    await conn.close()

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    chats_per_page = 4
    total_pages = (total_chats // chats_per_page) + (1 if total_chats % chats_per_page > 0 else 0) - 1

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if action == 'first':
        new_page = 0
    elif action == 'prev' and current_page > 0:
        new_page = current_page - 1
    elif action == 'next' and current_page < total_pages:
        new_page = current_page + 1
    elif action == 'last':
        new_page = total_pages
    else:
        new_page = current_page  # –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç, –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–π

    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    offset = new_page * chats_per_page
    conn = await db.get_conn()
    chats = await conn.fetch(
        "SELECT id, name FROM chats WHERE user_id = $1 ORDER BY created_at LIMIT $2 OFFSET $3",
        user_id, chats_per_page, offset
    )
    await conn.close()

    current_chat_id = user["current_chat_id"]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
    text = (
        "üóÇ *–ú–µ–Ω—é —á–∞—Ç–æ–≤ –ø–æ–∑–≤–æ–ª—è–µ—Ç:*\n"
        "- –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ —á–∞—Ç—ã\n"
        "- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏\n"
        "- –ò–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–æ–≤\n\n"
        "*–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —á–∞—Ç ‚§µÔ∏è*"
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    kb = InlineKeyboardMarkup(row_width=2)

    # –ö–Ω–æ–ø–∫–∏: —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
    kb.add(
        InlineKeyboardButton("‚ùå–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã", callback_data="delete_all_chats"),
        InlineKeyboardButton("‚ûï–ù–æ–≤—ã–π —á–∞—Ç", callback_data="create_chat")
    )

    # –ö–Ω–æ–ø–∫–∏ —á–∞—Ç–æ–≤
    for chat in chats:
        chat_name = chat["name"]
        chat_id = chat["id"]
        if chat_id == current_chat_id:
            chat_button_text = f"‚úÖ {chat_name}"
        else:
            chat_button_text = chat_name
        kb.add(InlineKeyboardButton(chat_button_text, callback_data=f"select_chat:{chat_id}"))

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    kb.row(
        InlineKeyboardButton("‚èÆ", callback_data=f"page:first:{new_page}"),
        InlineKeyboardButton("‚óÄ", callback_data=f"page:prev:{new_page}"),
        InlineKeyboardButton("‚ñ∂", callback_data=f"page:next:{new_page}"),
        InlineKeyboardButton("‚è≠", callback_data=f"page:last:{new_page}")
    )

    # –ù–∞–∑–∞–¥
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–∞—Ç–∏–∫–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await call.message.edit_text(text, parse_mode="Markdown", reply_markup=kb)
    except Exception as e:
        pass

    # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('select_chat:'))
async def select_chat(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞. –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —á–∞—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞.

    :param call: –û–±—ä–µ–∫—Ç CallbackQuery, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –≤—ã–∑–æ–≤–∞.
    """
    # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    chat_id = int(call.data.split(":")[1])
    user_id = call.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(user_id)
    if not user:
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —á–∞—Ç–µ
    chat = await db.get_chat_by_id(chat_id)
    chat_name = chat["name"]

    # –¢–µ–∫—Å—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    text = f'–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º\n"*{chat_name}*"'

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã–º —á–∞—Ç–æ–º
    select_button_text = "‚úÖ –í—ã–±—Ä–∞–Ω" if chat_id == user["current_chat_id"] else "‚ñ∂Ô∏è –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç —á–∞—Ç"
    kb = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(select_button_text, callback_data=f"select_active_chat:{chat_id}"),
        InlineKeyboardButton("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —á–∞—Ç", callback_data=f"rename_chat:{chat_id}"),
        InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —á–∞—Ç", callback_data=f"delete_selected_chat:{chat_id}"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_chats")
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await call.message.edit_text(text, parse_mode="Markdown", reply_markup=kb)
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('select_active_chat:'))
async def select_active_chat(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ callback-–∑–∞–ø—Ä–æ—Å–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —á–∞—Ç–æ–º –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —á–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.
    """
    chat_id = int(call.data.split(":")[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    if not user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = await db.get_conn()
    await conn.execute(
        "UPDATE users SET current_chat_id = $1 WHERE user_id = $2", chat_id, user["user_id"]
    )
    await conn.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —á–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω
    await call.message.edit_text("–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. \n\n*–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å ‚§µÔ∏è*", parse_mode="Markdown")
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('rename_chat:'))
async def rename_chat(call: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞.

    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ callback-–∑–∞–ø—Ä–æ—Å–∞ —Å ID —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è,
    –∑–∞—Ç–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∏–º—è —á–∞—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    chat_id = int(call.data.split(":")[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —á–∞—Ç–∞
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(chat_id=chat_id)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —á–∞—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —á–∞—Ç–∞:")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ —á–∞—Ç–∞
    await EnterChatRename.chat_name.set()


@dp.callback_query_handler(lambda c: c.data.startswith('delete_selected_chat:'))
async def delete_selected_chat(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞.

    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ callback-–∑–∞–ø—Ä–æ—Å–∞ —Å ID —á–∞—Ç–∞ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏
    –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏.
    """
    chat_id = int(call.data.split(":")[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —á–∞—Ç–∞
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = await db.get_conn()
    await conn.execute("DELETE FROM chats WHERE id = $1", chat_id)
    await conn.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
    await call.message.edit_text("–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω. \n\n*–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å ‚§µÔ∏è*", parse_mode="Markdown")
    await call.answer()  # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞


@dp.callback_query_handler(lambda c: c.data.startswith('select_chat:'))
async def select_chat(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ callback-–∑–∞–ø—Ä–æ—Å–∞ —Å ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤.
    """
    chat_id = int(call.data.split(":")[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —á–∞—Ç–∞
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = await db.get_user(user_id)
    if not user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = await db.get_conn()
    await conn.execute(
        "UPDATE users SET current_chat_id = $1 WHERE user_id = $2", chat_id, user["user_id"]
    )
    await conn.close()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
    await show_my_chats(call)


@dp.callback_query_handler(text="delete_all_chats")
async def confirm_delete_all_chats(call: CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤.

    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ callback-–∑–∞–ø—Ä–æ—Å–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º
    –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á–∞—Ç—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.
    """
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    confirmation_text = "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã?"
    kb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã", callback_data="confirm_delete_all_chats"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_chats")
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await call.message.edit_text(confirmation_text, reply_markup=kb)
    await call.answer()  # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞


@dp.callback_query_handler(text="confirm_delete_all_chats")
async def delete_all_chats(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ callback-–∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º, —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö,
    –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏.
    """
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = await db.get_conn()
    await conn.execute("DELETE FROM chats WHERE user_id = $1", user_id)
    await conn.close()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
    await show_my_chats(call)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
    await call.message.edit_text("–í—Å–µ —á–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã. \n\n*–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å ‚§µÔ∏è*", parse_mode="Markdown")
    await call.answer()


@dp.callback_query_handler(text="create_chat")
async def create_chat(call: CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞.

    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ callback-–∑–∞–ø—Ä–æ—Å–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞.
    """
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞:")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    await EnterChatName.chat_name.set()


@dp.message_handler(state=EnterChatName.chat_name)
async def process_new_chat_name(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞.

    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ —á–∞—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —á–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö,
    –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞.
    """
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_name = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞

    if not chat_name:
        # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –∑–∞–Ω–æ–≤–æ
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = await db.get_conn()
    await conn.execute(
        "INSERT INTO chats (user_id, name, created_at, updated_at) VALUES ($1, $2, NOW(), NOW())",
        user_id, chat_name
    )
    await conn.close()

    # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    conn = await db.get_conn()
    new_chat_id = await conn.fetchval(
        "SELECT id FROM chats WHERE user_id = $1 AND name = $2 LIMIT 1", user_id, chat_name
    )
    await conn.close()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
    await db.set_current_chat(user_id, new_chat_id)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞
    await message.answer(f'–ß–∞—Ç "_{chat_name}_" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n*–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å ‚§µÔ∏è*', parse_mode="Markdown")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()


@dp.message_handler(state=EnterChatRename.chat_name)
async def process_rename_chat_name(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞.

    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è —á–∞—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É, –∑–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–º—è —á–∞—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.
    """
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_name = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —á–∞—Ç–∞

    if not chat_name:
        # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –∑–∞–Ω–æ–≤–æ
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (chat_id)
    data = await state.get_data()
    chat_id = data["chat_id"]  # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è —á–∞—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = await db.get_conn()
    await conn.execute(
        "UPDATE chats SET name = $1, updated_at = NOW() WHERE id = $2 AND user_id = $3",
        chat_name, chat_id, user_id
    )
    await conn.close()

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞
    await message.answer(f'–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ "_{chat_name}_".\n\n*–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å ‚§µÔ∏è*', parse_mode="Markdown")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()


@dp.callback_query_handler(text="delete_chat")
async def delete_chat(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ, —É–¥–∞–ª—è–µ—Ç —á–∞—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = await db.get_user(user_id)
    if not user:
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = await db.get_conn()
    chat = await conn.fetchrow("SELECT name FROM chats WHERE id = $1", user["current_chat_id"])
    await conn.close()

    if not chat:
        # –ï—Å–ª–∏ —á–∞—Ç–æ–≤ –Ω–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await call.message.edit_text("–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –Ω–µ—Ç. \n\n*–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å ‚§µÔ∏è*", parse_mode="Markdown")
        return

    chat_name = chat["name"]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    confirmation_text = f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —á–∞—Ç: "*{chat_name}*?"'
    kb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("‚úÖ –£–¥–∞–ª–∏—Ç—å —á–∞—Ç", callback_data="confirm_delete_chat"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_chats")
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    await call.message.edit_text(confirmation_text, parse_mode="Markdown", reply_markup=kb)
    await call.answer()  # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞


@dp.callback_query_handler(text="confirm_delete_chat")
async def confirm_delete_chat(call: CallbackQuery):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è, —É–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏.
    """
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = await db.get_user(user_id)
    if not user:
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = await db.get_conn()
    await conn.execute(
        "DELETE FROM chats WHERE id = $1", user["current_chat_id"]

    )
    await conn.close()

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞
    await call.message.edit_text("–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω. \n\n*–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å ‚§µÔ∏è*", parse_mode="Markdown")
    await call.answer()




