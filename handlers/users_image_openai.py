import base64
import logging
from datetime import datetime, timedelta
from typing import List
from aiogram import Bot
from aiogram.types import Message, CallbackQuery, ChatActions, ContentType, MediaGroup, Update, InlineKeyboardMarkup, \
    InlineKeyboardButton
from aiogram.types.input_file import InputFile
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
import re
import tempfile
import os

from six import BytesIO

from handlers.users import not_enough_balance
from states.user import EnterChatName, EnterChatRename
from utils import db, ai, more_api, pay  # –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ë–î –∏ –≤–Ω–µ—à–Ω–∏–º–∏ API
from states import user as states  # –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
import keyboards.user as user_kb  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
from config import bot_url, TOKEN, NOTIFY_URL, bug_id, PHOTO_PATH, MJ_PHOTO_BASE_URL, ADMINS_CODER
from create_bot import dp  # –î–∏—Å–ø–µ—Ç—á–µ—Ä –∏–∑ create_bot.py
from utils.ai import mj_api, text_to_speech, voice_to_text, client
from aiogram.utils.exceptions import CantParseEntities
import html
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from create_bot import dp, bot

logger = logging.getLogger(__name__)

logging.basicConfig(
    level=logging.INFO,
    format='%(filename)s:%(lineno)d #%(levelname)-8s '
           '[%(asctime)s] - %(name)s - %(message)s')


def calculate_token_cost(size, quality):
    cost_map = {
        ("1024x1024", "low"): 272,
        ("1024x1024", "medium"): 1056,
        ("1024x1024", "high"): 4160,
        ("1536x1024", "low"): 400,
        ("1536x1024", "medium"): 1568,
        ("1536x1024", "high"): 6208,
        ("1024x1536", "low"): 408,
        ("1024x1536", "medium"): 1584,
        ("1024x1536", "high"): 6240
    }
    return cost_map.get((size, quality), 1056)  # default to medium


# Inline-–º–µ–Ω—é –¥–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç OpenAI"
image_openai_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="generate_image_prompt"),
            InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="edit_image"),
        ],
        [
            InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="image_settings"),
        ],
    ]
)

# Inline-–º–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="/size ‚Äî –í—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä", callback_data="set_size"),
            InlineKeyboardButton(text="/quality ‚Äî –í—ã–±—Ä–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ", callback_data="set_quality"),
        ],
        [
            InlineKeyboardButton(text="/background ‚Äî –í—ã–±—Ä–∞—Ç—å —Ñ–æ–Ω", callback_data="set_background"),
        ],
        [
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main_menu"),
        ],
    ]
)

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
size_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="1024x1024", callback_data="size_1024x1024"),
            InlineKeyboardButton(text="1536x1024", callback_data="size_1536x1024"),
            InlineKeyboardButton(text="1024x1536", callback_data="size_1024x1536"),
        ],
        [
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_settings"),
        ]
    ]
)

@dp.callback_query_handler(lambda c: c.data.startswith("set_size"))
async def handle_set_size(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.edit_message_text(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
        reply_markup=size_keyboard
    )

class ImageGenerationStates(StatesGroup):
    WAITING_FOR_PROMPT = State()

@dp.callback_query_handler(lambda c: c.data == "generate_image_prompt")
async def handle_generate_image_prompt(callback_query: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        """<b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>
<i>–ù–∞–ø—Ä–∏–º–µ—Ä:</i> <code>–ó–∞–º–µ—Ä–∑—à–µ–µ –±–∏—Ä—é–∑–æ–≤–æ–µ –æ–∑–µ—Ä–æ –≤–æ–∫—Ä—É–≥ –∑–∞—Å–Ω–µ–∂–µ–Ω–Ω—ã—Ö –≥–æ—Ä–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω</code>

<u><a href="https://telegra.ph/Kak-polzovatsya-MidJourney-podrobnaya-instrukciya-10-16 ">–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.</a></u>""",
        disable_web_page_preview=True,
    )
    await ImageGenerationStates.WAITING_FOR_PROMPT.set()


@dp.callback_query_handler(lambda c: c.data == "image_settings")
async def handle_image_settings(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=settings_keyboard,
    )

@dp.callback_query_handler(lambda c: c.data == "back_to_main_menu")
async def back_to_main_menu(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.edit_message_text(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=image_openai_menu
    )


# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞
quality_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="Low", callback_data="quality_low"),
         InlineKeyboardButton(text="Medium", callback_data="quality_medium"),
         InlineKeyboardButton(text="High", callback_data="quality_high")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_settings")]
    ]
)


@dp.callback_query_handler(lambda c: c.data.startswith("set_quality"))
async def handle_set_quality(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.edit_message_text(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
        reply_markup=quality_keyboard
    )


@dp.callback_query_handler(lambda c: c.data.startswith("quality_"))
async def handle_quality_selection(callback_query: CallbackQuery, state: FSMContext):
    selected_quality = callback_query.data.replace("quality_", "")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –∫–∞—á–µ—Å—Ç–≤–æ: {selected_quality}")

    async with state.proxy() as data:
        data['quality'] = selected_quality

    await bot.answer_callback_query(callback_query.id, text=f"–í—ã–±—Ä–∞–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ: {selected_quality}")
    await bot.edit_message_text(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=settings_keyboard
    )


@dp.message_handler(state="*", text="üñºÔ∏è–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç OpenAI‚úÖ")
@dp.message_handler(state="*", text="üñºÔ∏è–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç OpenAI")
@dp.message_handler(state="*", commands="image_openai")
async def gen_image_openai(message: Message, state: FSMContext):
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.change_default_ai(message.from_user.id, "image_openai")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç OpenAI –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π AI
    user = await db.get_user(message.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–∫–∏
    if user["image_openai"] <= 0 and user["free_image_openai"] <= 0:
        await not_enough_balance(message.bot, message.from_user.id, "image_openai")  # –°–æ–æ–±—â–∞–µ–º –æ–± –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Inline-–º–µ–Ω—é
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=image_openai_menu)


@dp.message_handler(state=ImageGenerationStates.WAITING_FOR_PROMPT)
async def process_image_prompt(message: Message, state: FSMContext):
    user_id = message.from_user.id

    user = await db.get_user(user_id)

    if user["image_openai"] <= 0 and user["free_image_openai"] <= 0:
        await not_enough_balance(message.bot, user_id, "image_openai")
        return

    prompt = message.text.strip()

    logger.info(f"–ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {prompt}")

    settings = user["image_openai_settings"]
    size = settings.get("size", "1024x1024")
    quality = settings.get("quality", "medium")
    background = settings.get("background", "opaque")

    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        response = client.images.generate(
            model="gpt-image-1",
            prompt=prompt,
            size=size,
            quality=quality,
            format="png",
            background=background,
        )

        image_base64 = response.data[0].b64_json
        image_bytes = base64.b64decode(image_base64)

        logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await message.bot.send_photo(
            chat_id=user_id,
            photo=InputFile(BytesIO(image_bytes), filename="image.png")
        )

        image_type = size, quality, background

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await db.add_action(user_id, "image_openai", image_type)

        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤/–ª–∏–º–∏—Ç–æ–≤
        await db.decrease_image_openai_balance(user_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    finally:
        await state.finish()