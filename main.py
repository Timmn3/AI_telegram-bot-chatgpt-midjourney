from aiogram.utils import executor
from aiogram import types
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from config import ADMINS_CODER
from create_bot import dp, bot
from utils import db
from utils.ai import mj_api
from handlers import admin, users, sub, users_image_openai # ‚Üê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
import logging

from utils.scheduled_tasks.daily_token_reset import refill_tokens

logger = logging.getLogger(__name__)

logging.basicConfig(
    level=logging.INFO,
    format='%(filename)s:%(lineno)d #%(levelname)-8s '
           '[%(asctime)s] - %(name)s - %(message)s')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler()


async def on_startup(_):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""

    await db.start()  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î

    await bot.set_my_commands([
        types.BotCommand("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç"),
        types.BotCommand("chatgpt", "ChatGPT"),
        types.BotCommand("midjourney", "MidJourney"),
        types.BotCommand("image_openai", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç OpenAI"),
        types.BotCommand("account", "–ê–∫–∫–∞—É–Ω—Ç"),
        types.BotCommand("help", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
        types.BotCommand("partner", "–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
    ])

    await bot.send_message(ADMINS_CODER, "–ë–æ—Ç NeuronAgent ü§ñ –∑–∞–ø—É—â–µ–Ω")

    # –ù–∞—Å—Ç—Ä–æ–∏–º –∏ –∑–∞–ø—É—Å—Ç–∏–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    set_scheduled_jobs()

    if not scheduler.running:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler.start()


def set_scheduled_jobs():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
    try:
        scheduler.add_job(refill_tokens, "cron", hour=0, minute=0)
    except Exception as e:
        logger.error(f"Error while adding scheduled jobs: {e}")


async def on_shutdown(_):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–π API –∏ –±–æ—Ç–∞...")

    await mj_api.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º API-—Å–µ—Å—Å–∏–∏
    await bot.close()

    if scheduler.running:
        scheduler.shutdown(wait=False)  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫

    logger.info("–í—Å–µ —Å–µ—Å—Å–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã.")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown)
